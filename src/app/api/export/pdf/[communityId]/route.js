import sql from "@/app/api/utils/sql";

export async function GET(request, { params }) {
  try {
    const { communityId } = params;
    
    // Get community and consumption data
    const [community] = await sql`
      SELECT name FROM communities WHERE id = ${communityId}
    `;
    
    if (!community) {
      return Response.json({ error: 'Community not found' }, { status: 404 });
    }
    
    const data = await sql`
      SELECT 
        u.unit_number,
        ROUND(AVG(cr.water_usage), 2) as avg_water,
        ROUND(AVG(cr.electricity_usage), 2) as avg_electricity
      FROM consumption_readings cr
      JOIN units u ON cr.unit_id = u.id
      WHERE u.community_id = ${communityId}
        AND cr.reading_date >= CURRENT_DATE - INTERVAL '30 days'
      GROUP BY u.id, u.unit_number
      ORDER BY u.unit_number
    `;
    
    // Create simple PDF content (text-based for now)
    const reportDate = new Date().toLocaleDateString();
    const pdfContent = `
COMMUNITY UTILITY REPORT
========================

Community: ${community.name}
Report Date: ${reportDate}
Period: Last 30 Days

UNIT CONSUMPTION SUMMARY
========================

${data.map(unit => 
  `Unit ${unit.unit_number}: Water: ${unit.avg_water} gal, Electricity: ${unit.avg_electricity} kWh`
).join('\n')}

STATISTICS
==========

Total Units: ${data.length}
Average Water Usage: ${(data.reduce((sum, u) => sum + parseFloat(u.avg_water || 0), 0) / data.length).toFixed(2)} gal
Average Electricity Usage: ${(data.reduce((sum, u) => sum + parseFloat(u.avg_electricity || 0), 0) / data.length).toFixed(2)} kWh

Generated by Community Utility Dashboard
    `.trim();
    
    return new Response(pdfContent, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="community_${communityId}_report.txt"`
      }
    });
    
  } catch (error) {
    console.error('PDF export error:', error);
    return Response.json({ error: 'Failed to export PDF' }, { status: 500 });
  }
}